<?php

/**
 * Defines tests for paragraphs.
 */
class ParagraphsWebTestCase extends BackdropWebTestCase {

  /**
   * A user object for the privilaged user.
   *
   * @var object
   */
  protected $privilegedUser;

  /**
   * Give display information to the SimpleTest system.
   *
   * It's a good idea to organize your tests consistently using the 'group' key.
   *
   * @return array
   *   A keyed array of information for SimpleTest to show.
   */
  public static function getInfo() {
    return array(
      'name' => 'Paragraphs test',
      'description' => 'Ensure that the simpletest_example content type provided functions properly.',
      'group' => 'Paragraphs',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    $modules = array(
      'paragraphs_test',
    );
    parent::setUp($modules);

    // Make sure the base configuration is set up.
    // @todo: Do this without Features
    // features_revert_module('paragraphs_test');

    // Create with a user rolegiven by the feature.
    $this->privilegedUser = $this->backdropCreateUserWithRole('ptest creator');
  }

  /**
   * Tests required field validation on paragraph bundle.
   */
  public function testRequiredFieldInBundle() {
    $this->backdropLogin($this->privilegedUser);

    $this->backdropGet('node/add/paragraph-test');

    // Add a new paragraph before saving node.
    $this->backdropPost(NULL, array(), t('Add new Paragraph'));

    $title = $this->randomString(20);

    $create_edit = array(
      'title' => $title,
    );

    // Click the Save button to test whole-form validation.
    $this->backdropPost(NULL, $create_edit, t('Save'));

    // Empty field should fail validation.
    $this->assertRaw(t('!field field is required.', array('!field' => 'PTest Text')), 'Field failed whole-form validation');

    // Click the Collapse button to test per-paragraph validation.
    $this->backdropPost(NULL, $create_edit, t('Collapse'));

    // Empty field should fail validation.
    $this->assertRaw(t('!field field is required.', array('!field' => 'PTest Text')), 'Field failed per-paragraph validation');

    // Add value to field.
    $value1 = $this->randomString(20);
    $create_edit = array(
      'field_paragraphs[und][0][field_ptest_text][und][0][value]' => $value1,
    );

    // Click Collapse button to close paragraph (should now pass).
    $this->backdropPost(NULL, $create_edit, t('Collapse'));

    // Paragraph item should collapse after passing validation.
    $this->assertRaw(t('Warning: this content must be saved to reflect changes on this paragraphs item.'), 'Field passed per-paragraph validation');

    $create_edit = array(
      'title' => $title,
    );

    // Save whole node.
    $this->backdropPost(NULL, $create_edit, t('Save'));

    // Node should save.
    $this->assertRaw(t('!post %title has been created.', array('!post' => 'Paragraph Test', '%title' => $title)), 'Paragraph test node created.');
    $this->assertText(check_plain($value1), 'Value of paragraph was rendered.');
  }

  /**
   * Helper to create a user with a given role.
   *
   * @param string $role_name
   *   The name of the role to give the user.
   *
   * @return bool|object
   *   A user account object.
   *
   * @throws \Exception
   *
   * @see BackdropWebTestCase::backdropCreateUser()
   */
  protected function backdropCreateUserWithRole($role_name) {

    $role = user_role_load_by_name($role_name);
    if (!$role) {
      return FALSE;
    }

    // Create a user assigned to that role.
    $edit           = array();
    $edit['name']   = $this->randomName();
    $edit['mail']   = $edit['name'] . '@example.com';
    $edit['pass']   = user_password();
    $edit['status'] = 1;
    $edit['roles']  = array($role->rid => $role->rid);

    $account = user_save(backdrop_anonymous_user(), $edit);

    $this->assertTrue(!empty($account->uid), t('User created with name %name and pass %pass', array('%name' => $edit['name'], '%pass' => $edit['pass'])), t('User login'));
    if (empty($account->uid)) {
      return FALSE;
    }

    // Add the raw password so that we can log in as this user.
    $account->pass_raw = $edit['pass'];

    return $account;
  }

}

class ParagraphStatusVisibilityTestCase extends BackdropWebTestCase{

  const HOST_ENTITY_TYPE = 'paragraph-test';
  const BUNDLE_NAME = 'ptest';
  protected $privilegedUser;
  protected $hostEntityEditUrl;

  /**
   * Test paragraphs item visibility based on status.
   */
  public static function getInfo() {
    return array(
      'name' => 'Paragraphs item and bundles status visibility',
      'description' => 'Test for status functionality for bundles and items.',
      'group' => 'Paragraphs',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    $modules = array(
      'paragraphs_test',
    );

    parent::setUp($modules);

    // Make sure the base configuration is set up.
    features_revert_module('paragraphs_test');

    // Create user with administer paragraphs bundles and node edit access.
    $this->privilegedUser = $this->backdropCreateUser(array(
      'administer paragraphs bundles',
      'bypass node access'
    ));

    $this->backdropLogin($this->privilegedUser);
  }

  /**
   * Status visibility for Paragraphs item.
   */
  public function testStatusVisibilityParagraphsItem(){
    // Create host entity with Paragraphs item.
    $this->backdropGet('node/add/' . $this::HOST_ENTITY_TYPE);
    $this->backdropPost(NULL, array(), t('Add new Paragraph'));

    $title = $this->randomString(20);
    $value1 = $this->randomString(20);

    $create_edit = array(
      'title' => $title,
      'field_paragraphs[und][0][field_ptest_text][und][0][value]' => $value1,
    );

    $this->backdropPost(NULL, $create_edit, t('Save'));

    // Ensure creation passed.
    $this->assertRaw(t('!post %title has been created.', array('!post' => 'Paragraph Test', '%title' => $title)), 'Paragraph test node created.');
    $this->assertText(check_plain($value1), 'Value of paragraphs item is visible.');

    // Get host entity edit url.
    $this->hostEntityEditUrl = $this->url . '/edit';

    // Change visibility of Paragraphs item.
    $this->backdropGet($this->hostEntityEditUrl);

    $create_edit = array(
      'field_paragraphs[und][0][status]' => FALSE,
    );

    $this->backdropPost(NULL, $create_edit, t('Save'));
    // Ensure paragraphs item not visible.
    $this->assertNoText(check_plain($value1), 'Value of paragraphs item is not visible.');
  }

  /**
   * Status visibility for Paragraphs bundle.
   */
  public function testStatusVisibilityParagraphsBundle(){
    // Ensure status enabled in bundle
    $this->backdropGet('admin/structure/paragraphs/' . $this::BUNDLE_NAME . '/edit');

    $create_edit = array(
      'allow_unpublish' => TRUE,
    );

    $this->backdropPost(NULL, $create_edit, t('Save Paragraph bundle'));

    // Ensure status enabled in paragraphs item form
    $this->backdropGet('node/add/' . $this::HOST_ENTITY_TYPE);
    $this->backdropPost(NULL, array(), t('Add new Paragraph'));
    $this->assertFieldChecked('edit-field-paragraphs-und-0-actions-togglepublish-button', 'Publish button exists.');

    // Disable status checkbox in bundle
    $this->backdropGet('admin/structure/paragraphs/' . $this::BUNDLE_NAME . '/edit');
    $create_edit = array(
      'allow_unpublish' => FALSE,
    );
    $this->backdropPost(NULL, $create_edit, t('Save Paragraph bundle'));

    // Ensure status disabled in paragraphs item form
    $this->backdropGet('node/add/' . $this::HOST_ENTITY_TYPE);
    $this->backdropPost(NULL, array(), t('Add new Paragraph'));
    $this->assertNoFieldById('edit-field-paragraphs-und-0-actions-togglepublish-button', 'Publish button not showing.');
  }
}
