<?php
/**
 * @file
 * Install, update and uninstall functions for the paragraphs_bundle_permissions
 * sub-module.
 */

/**
 * Implements hook_install().
 *
 * Add default permissions to anonymous role. Admin roles are added by default
 * when the permissions are defined, so no need to add here.
 */
function paragraphs_bundle_permissions_install() {
  // Load paragraph types/bundles.
  $bundles = paragraphs_bundle_load();
  // Create empty array for permissions.
  $permissions = array();
  // Define the permissions for each type/bundle.
  foreach ($bundles as $machine_name => $bundle) {
    $permission_name = 'view paragraph content ' . $machine_name;
    $permissions += array(
      $permission_name => TRUE,
    );
  }
  // Add the permissions to the anonymous role.
  user_role_change_permissions('anonymous', $permissions);

  // Define a message informing the user default permissions have been added to
  // each paragraph type.
  // Get role names.
  $roles = user_roles();
  // Compile the message.
  $t = get_t();
  $message = $t('Default permissions have been added to the %anonymous role (View) and %administrator role (All) for all existing paragraph types. Review and make changes if needed on the <a href="@url">permissions</a> page.',
    array(
      '%anonymous' => $roles['anonymous'],
      '%administrator' => $roles['administrator'],
      '@url' => paragraphs_bundle_permissions_url(),
    )
  );
  // Display the message.
  backdrop_set_message($message, 'info');
}

/**
 * Implements hook_update().
 *
 * Adds default permissions to the administrator role as these may be missing
 * if new paragraph types have been added since the module was first enabled
 * and they have not been added manually. Other roles will not be modified here
 * as there is a strong possibility they have been defined.
 */
function paragraphs_bundle_permissions_update_1100() {
  // Load paragraph types/bundles.
  $bundles = paragraphs_bundle_load();
  // Define all permissions for the administrator role.
  $admin_permission_types = array('view', 'update', 'delete', 'create');
  // Define array to add permissions to.
  $permissions = array();
  // Define the permissions for each type/bundle.
  foreach ($bundles as $machine_name => $bundle) {
    // Loop through each admin permission and add permission to array.
    foreach ($admin_permission_types as $permission) {
      $permission_name = $permission . ' paragraph content ' . $machine_name;
      $permissions += array(
        $permission_name => TRUE,
      );
    }
  }
  // Add the permissions to the administrator role.
  user_role_change_permissions('administrator', $permissions);

  // Define a message informing the user that default permissions have been
  // added to each paragraph type.
  // Get role names.
  $roles = user_roles();
  // Compile the message.
  $message = t('Default permissions (All) have been added to the %administrator role for all existing paragraph types if they did not already exist. No other roles have been modified. Review and make changes if needed on the <a href="@url">permission</a> page.',
    array(
      '%administrator' => $roles['administrator'],
      '@url' => paragraphs_bundle_permissions_url(),
    )
  );
  // Display the message.
  backdrop_set_message($message, 'info');
}

/**
 * Generate a permissions page url.
 */
function paragraphs_bundle_permissions_url() {
  // Generate a link to the relevant section of the permissions screen.
  $url_base = 'admin/config/people/permissions';
  $url_fragment = 'module-paragraphs_bundle_permissions';
  // Handle differently if the Filter Permissions module is enabled as this
  // needs the fragment as part of the path so it can be processed server-side.
  if (module_exists('filter_perms')) {
    $url_path = url($url_base . '/' . $url_fragment);
  }
  else {
    $url_path = url($url_base, array(
      'fragment' => $url_fragment,
    ));
  }
  return $url_path;
}
